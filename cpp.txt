

List initialization of variables of built-in type not alloved if there is loss of info

long double ld = 3.14;
int a{ld}, b = {ld}; // error: narrowing conversion required
int c(ld), d = ld;   // ok: but value will be truncated

Built-in variables defined outside any function body are initilaized to zero
Built-in variables defined in function are uninitialized

A compound type is a type that is defined in terms of another type. E.g. References and pointers

References can be lvalue reference or rvalue reference
Usually references are lvalue references and can be considered as alternate name for an object
At initialization the reference is bind to its initial object.
Because references are not objects, we cannot bind a reference to another reference

Pointers point to another object
Pointers need not be initialized at definition
Pointers are objects in their own right
Pointers can point to multiple objects over time













l-value are those that take an address. If a pointer can point to it, then its an l value
Examples are variable names and function names
r-values are those that dont take an address. Examples are literals (5, 20) and function return values
As a result. till C++11, the function return value was copied into the variable name
With move, the function return is now moved to the variable
val = foo();

https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md
Basically ‘const’ applies to whatever is on its immediate left (other than if there is nothing there in which case it applies to whatever is its immediate right).

https://en.cppreference.com/w/cpp/language/raii
Resource Acquisition Is Initialization or RAII, is a C++ programming technique[1][2] which binds the life cycle of a resource that must be acquired before use (allocated heap memory, thread of execution, open socket, open file, locked mutex, disk space, database connection—anything that exists in limited supply) to the lifetime of an object.

RAII guarantees that the resource is available to any function that may access the object (resource availability is a class invariant, eliminating redundant runtime tests). It also guarantees that all resources are released when the lifetime of their controlling object ends, in reverse order of acquisition. Likewise, if resource acquisition fails (the constructor exits with an exception), all resources acquired by every fully-constructed member and base subobject are released in reverse order of initialization. This leverages the core language features (object lifetime, scope exit, order of initialization and stack unwinding) to eliminate resource leaks and guarantee exception safety. Another name for this technique is Scope-Bound Resource Management (SBRM), after the basic use case where the lifetime of an RAII object ends due to scope exit.

RAII can be summarized as follows:

encapsulate each resource into a class, where
the constructor acquires the resource and establishes all class invariants or throws an exception if that cannot be done,
the destructor releases the resource and never throws exceptions;
always use the resource via an instance of a RAII-class that either
has automatic storage duration or temporary lifetime itself, or
has lifetime that is bounded by the lifetime of an automatic or temporary object
Move semantics make it possible to safely transfer resource ownership between objects, across scopes, and in and out of threads, while maintaining resource safety.

Classes with open()/close(), lock()/unlock(), or init()/copyFrom()/destroy() member functions are typical examples of non-RAII classes:





