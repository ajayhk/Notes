https://en.cppreference.com/w/cpp/language/initialization
Depending on context, the initializer may invoke:

Value initialization, e.g. std::string s{};
Direct initialization, e.g. std::string s("hello");
Copy initialization, e.g. std::string s = "hello";
List initialization, e.g. std::string s{'a', 'b', 'c'};
Aggregate initialization, e.g. char a[3] = {'a', 'b'};
Reference initialization, e.g. char& c = a[0];
If no initializer is provided, the rules of default initialization apply.
*********
Compilers silently write four functions if they are not explicitly provided
Copy constructor
Copy assignment operator
Destructor
Default constructor  
*********




*********
List initialization of variables of built-in type not allowed if there is
loss of info

long double ld = 3.14;
int a{ld}, b = {ld}; // error: narrowing conversion required
int c(ld), d = ld;   // ok: but value will be truncated

**********

Built-in variables defined outside any function body are initilaized to zero
Built-in variables defined in function are uninitialized
**********
A compound type is a type that is defined in terms of another type.
E.g. References and pointers
**********
References can be lvalue reference or rvalue reference
Usually references are lvalue references and can be considered as alternate 
name for an object
At initialization the reference is bind to its initial object.
Because references are not objects, we cannot bind a reference
to another reference
**********
Pointers point to another object
Pointers need not be initialized at definition
Pointers are objects in their own right
Pointers can point to multiple objects over time
**********
When we do int* p; int* is not the type. The type is int and variable is *p
int* p1, p2; // p1 is a pointer to int; p2 is an int
**********
Reading complex declaration
int *&r = p;   // r is a reference to the pointer p
Read from right to left. & shows that r is a reference. * shows it is a
reference to a pointer
The int shows it is a reference to a pointer of type int

Similarly
const double *const pip = &pi; // pip is a const pointer to a const object
The pointer const is called top level const and object's const is called
low level const
**********
To define a single instance of a const variable use extern in both the
definition and declarations
**********
The last one is an error because when that binding happens it refers to a
temporary which is created just for this assignment by the compiler.
So trying to change value of temporary doesnt make sense as it is never refered

int i = 42;
const int &r1 = i;      // we can bind a const int& to a plain int object
const int &r2 = 42;     // ok: r1 is a reference to const
const int &r3 = r1 * 2; // ok: r3 is a reference to const
int &r4 = r * 2;        // error: r4 is a plain, non const reference

**********
You can do a const reference to a non-const variable
Only restriction is that you cannot change variable through the const reference
**********
We can ask the compiler to verify that a variable is a constant expression
by declaring the variable in a constexpr declaration.
constexpr int sz = size();    // ok only if size is a constexpr function
Be careful that here q is the const pointer
constexpr int *q = nullptr; // q is a const pointer to int
Function variables usually cannot be constexpr since they not stored at a
fixed address
**********
Type alias: Two ways
typedef double price;
using price = double; // alias declaration
**********
Surprising results with using const and typedef
typedef char *pstring;
const pstring cstr = 0; // cstr is a constant pointer to char
const pstring *ps;      // ps is a pointer to a constant pointer to char
**********
auto automatically deduces the type from how it was initialized
However auto ignores the top-level const
To explicitly make it const, add const
const auto f = ci; // deduced type of ci is int; f has type const int
Same for reference
auto &r = ci; // r is a const int& that is bound to ci
**********
decltype returns the type of operand without evaluating the expression
decltype(f()) sum = x; // sum has whatever type f returns
decltype of a parenthesized variable is always a reference because the compiler
will evaulate the operand as an expression
decltype((i)) d = 5; 
**********
string s4(10, 'c');   // s4 is cccccccccc
**********
Direct and copy forms of initialization
When = is used, it is copy init. When = is omitted, it is direct initialization
In cases of multiple values being initialized, only direct init is possible.

For vectors, multiple values can only be initialized using
list init {} and not ()
vector<string> v1{"a", "an", "the"};  // list initialization
vector<string> v2("a", "an", "the");  // error

Value initialization
vector<int> ivec(10);
We cannot use copy when value initializating
With value initialization, we always need to provide explicit initializer
When providing an element count, have to use direct form of initialization
**********
Copy constructor is called when a new object is created from an existing
object, as a copy of the existing object. Assignment operator is
called when an already initialized object is assigned a new value from
another existing object.
  Test t1, t2; 
  t2 = t1;  // calls assignment operator, same as "t2.operator=(t1);" 
  Test t3 = t1;  // calls copy constructor, same as "Test t3(t1);" 
**********
vector<int> v1(10);    // v1 has ten elements with value 0
vector<int> v2{10};    // v2 has one element with value 10
vector<int> v3(10, 1); // v3 has ten elements with value 1
vector<int> v4{10, 1}; // v4 has two elements with values 10 and 1

**********
To read in an entire line, use getline(cin, line);
getline returns the cin, so we can do things like while(getline(cin, line)) {}
**********
Range based for
for(declaration: expression) 
    statement;
**********
Vector is a template, not a type. vector<int> is a type
**********
Iterator:
vector<int>::iterator it; // it can read and write vector<int> elements
vector<int>::const_iterator it3; // it3 can read but not write elements
cbegin and cend provide const_iterator
**********
Array init with constexpr possible. Not with non-const
constexpr int sz = 10;
int a[sz];

We cannot use auto to deduce the type of array from a list of initializers.
Elements are default initialized
int a3[5] = {0, 1, 2};        // equivalent to a3[] = {0, 1, 2, 0, 0}
**********
List initializing an array with characters requires an explicit null 
char a1[] = {'C', '+', '+'};       // list initialization, no null
char a2[] = {'C', '+', '+', '\0'}; // list initialization, explicit null
char a3[] = "C++";                 // null terminator added automatically
const char a4[6] = "Daniel";       // error: no space for the null!
Array assignment should be avoided
**********
size_t is an unsigned type thta is guaranteed to be large enough to hold the
size of any object in memory. It is defined in cstddef, C++ version of stddef.h
**********
Compiler usually creates a pointer to first element when we define an array.
As a result
int oldarr[10];
auto arr(oldarr);   // arr is a pointer to first element of oldarr
Treats it as auto arr(&oldarr[0]);
arr = 10;       // Error as cannot allocate int to ptr
However decltype defines it to be of array of int type
decltype(oldarr) arr2;
arr2 = p;       // Error, arr2 is an array and cant assign an int pointer to it
We can take an off-the-end pointer as follows
int *e = &arr[10];  // This is equivalent to vector.end()
Cannot increment or dereference it
The library includes two fns begin and end to access first and one past last
**********
We cannot initialize an array as a copy of another array, nor is it legal to
assign one array to another
**********
When reading declarations, read from inside out followed by right to left
int *ptrs[10];            //  ptrs is an array of ten pointers to int
int &refs[10] = /* ? */;  //  error: no arrays of references
int (*Parray)[10] = &arr; //  Parray points to an array of ten ints
int (&arrRef)[10] = arr;  //  arrRef refers to an array of ten ints
**********
A static_cast removes warning about loss of information. Static cast is
useful for cases where the compiler will not generate convertion automatically
const_cast converts a const object to a nonconst type. However writing to
that const object is undefined. If it was originally not a const, it is fine
const int *cip;
int *ip = const_cast<int*>(cip);
reinterpret_cast performas a low-level reimnterpretation of bit pattern
of the operand
int *ip;
char *cp = reinterpret_cast<char*>(ip);
mutable is useful where there is a variable that needs to be modified by a
const function. The const function is meant to not modify important member
variables, but a member variable like accessCount which just tracks how
many accesses are done can be modified using mutable
**********
3.5.4.-5.6.1
**********

**********

**********

**********

**********

**********

**********

**********

**********

**********
Algorithms
http://www.cplusplus.com/reference/algorithm/

std::list<int>::iterator it = foo.begin();
advance (it,3);
std::copy (bar.begin(),bar.end(),std::inserter(foo,it));

// A back_insert_iterator that inserts elements at the end of container x.
std::copy (bar.begin(),bar.end(),back_inserter(foo));

// Copy: Copies the elements in the range [first,last) into the range beginning at result.
int myints[]={10,20,30,40,50,60,70};
std::vector<int> myvector (7);
std::copy ( myints, myints+7, myvector.begin() );
//  myvector contains: 10 20 30 40 50 60 70

Heap
  std::make_heap (v.begin(),v.end());
  std::pop_heap (v.begin(),v.end()); v.pop_back();
  v.push_back(99); std::push_heap (v.begin(),v.end());
  std::sort_heap (v.begin(),v.end());


**********
qsort

int values[] = { 40, 10, 100, 90, 20, 25 };
int compare (const void * a, const void * b)
{
  return ( *(int*)a - *(int*)b );
}
qsort (values, 6, sizeof(int), compare);
**********
std::sort
bool myfunction (int i,int j) { return (i<j); }

struct myclass {
  bool operator() (int i,int j) { return (i<j);}
} myobject;
// using default comparison (operator <):
std::sort (myvector.begin(), myvector.begin()+4);

// using function as comp
std::sort (myvector.begin()+4, myvector.end(), myfunction);

// using object as comp
std::sort (myvector.begin(), myvector.end(), myobject);
**********
Classes
Member functions access the object on which they were called through an extra,
implicit parameter named this.
When we call a member function, this is initialized with the address of the
object on which the function was invoked. For example, when we call
total.isbn()
the compiler passes the address of total to the implicit this parameter in isbn
It is as if the compiler rewrites this call as
// pseudo-code illustration of how a call to a member function is translated
Sales_data::isbn(&total)

**********
Compiler generated functions
If the class does not generate default functions, compiler does
For e.g., for the below class
  class dog() {};
Compiler will generate
Copy constructor
  Dog(const Dog& rhs) {}
Copy assignment operator
  Dog& operator=(const Dog& rhs) {}
Default constructor
  Dog() {}

Destructor
  ~Dog() {} 
**********
To prevent compiler from generating functions, provide the equivalent function
For preventing, say, Copy constructor from being used
  Dog(const Dog& rhs) = delete; // C++11
For C++03, make it private. However, class functions can still use that private fn
**********

**********

**********

**********

**********

**********

**********

**********

**********

**********

**********

**********

**********







**********
l-value are those that take an address. If a pointer can point to it,
then its an l value
Examples are variable names and function names
r-values are those that dont take an address. Examples are literals (5, 20)
and function return values
As a result. till C++11, the function return value was copied into the
variable name
With move, the function return is now moved to the variable
val = foo();
**********
// const parameters
void setDate(const int& date);
Doing const when you pass the parameter by copy doesnt make sense since you dont
care if the copy was modified
void setDate(const int date);

// const return value
const string& getName();

// const function
void printName const ();

// consts everywhere
const int* const foo (const int* const& p) const;

Basically ‘const’ applies to whatever is on its immediate left (other than
if there is nothing there in which case it applies to whatever is its immediate right).
For pointers if const is on the left of *, then data is constant
If const is to the right of *, then pointer is constant
int* const p = &i;
int const *p = &1;



**********
If you wish to declare an extern variable in a C++ source code file for use in a C source code file, use:
extern "C" const int x=10;  
to prevent name mangling by the C++ compiler.
**********

**********
https://en.cppreference.com/w/cpp/language/raii
Resource Acquisition Is Initialization or RAII, is a C++ programming
technique[1][2] which binds the life cycle of a resource that must be acquired before use (allocated heap memory, thread of execution, open socket, open file, locked mutex, disk space, database connection—anything that exists in limited supply) to the lifetime of an object.

RAII guarantees that the resource is available to any function that may access the object (resource availability is a class invariant, eliminating redundant runtime tests). It also guarantees that all resources are released when the lifetime of their controlling object ends, in reverse order of acquisition. Likewise, if resource acquisition fails (the constructor exits with an exception), all resources acquired by every fully-constructed member and base subobject are released in reverse order of initialization. This leverages the core language features (object lifetime, scope exit, order of initialization and stack unwinding) to eliminate resource leaks and guarantee exception safety. Another name for this technique is Scope-Bound Resource Management (SBRM), after the basic use case where the lifetime of an RAII object ends due to scope exit.

RAII can be summarized as follows:

encapsulate each resource into a class, where
the constructor acquires the resource and establishes all class invariants or throws an exception if that cannot be done,
the destructor releases the resource and never throws exceptions;
always use the resource via an instance of a RAII-class that either
has automatic storage duration or temporary lifetime itself, or
has lifetime that is bounded by the lifetime of an automatic or temporary object
Move semantics make it possible to safely transfer resource ownership between objects, across scopes, and in and out of threads, while maintaining resource safety.

Classes with open()/close(), lock()/unlock(), or init()/copyFrom()/destroy() member functions are typical examples of non-RAII classes:
**********


Iterator operations
*iter
iter->mem // Fetches mem which is a member data structure
++iter and --iter
==, !=, 
Iterator arethmetic (additional for string and vector)
iter+n, iter-n, iter+=n, iter1-iter2, >, >=, <, <=


**********
String:
init:

functions:
getine(), size(), empty()
size_type
Character:
isalnum(c), isalpha(), iscntrl(), isdigit, isgraph, islower, ispunct, isspace, isupper, isxdigit, tolower/upper
**********
Vector:
init:
vector<int> v1(10);    // v1 has ten elements with value 0
vector<int> v2{10};    // v2 has one element with value 10
vector<int> v3(10, 1); // v3 has ten elements with value 1
vector<int> v4{10, 1}; // v4 has two elements with values 10 and 1
functions:
push_back(t)    // Puts t as last element in vector
empty()         // Returns true if empty
size()         // Returns the number of elements

**********
Map:
std::map
If a member that doesnt exist is accessed, say map[10], then that empty key
is inserted. Map.find will not do that
std::map is a red black tree
functions supported:
insert
[]
find
erase

it=mymap.find('b');
mymap.erase (it);                   // erasing by iterator
mymap.erase ('c');                  // erasing by key
it=mymap.find ('e');
mymap.erase ( it, mymap.end() );    // erasing by range


**********
priority_queue

Doesnt have erase.

Can be implemented by inheriting a chlid class and then
adding a remove or erase function. The function can be implemented
by using find algorithm and then removing the element. 

**********
Heap data structure
Invariant:
- Left child is smaller and right child is bigger
- However not all keys to left are smaller
class heap
{
  int key;
  void* pointer_to_data;
  heap *left_child;
  heap *right_child;
  heap *parent;
  operations();
}
insert - Log n - The element is inserted as the last element and then a bubble_up operation is done 
extract_min or extract_max - Log n - The root is extracted and replaced with the last element. Then the last element is bubbled_down
Can be conceptualized as a tree but implemented as an array
The invariant is to make sure that both the children are larger than the parent
Need to also keep track of how many elements are there. This is needed at time of insertions (insert is done at the end and bubbled up)
**********
Hash tables

Trees
Number of entries >= 2^height of tree - 1
Trees rotations - Left and right rotations. Move X under Y or vice versa


Binary search trees

Balanced search tree
Invariants
- All keys on left are smaller and all keys on right are larger

C++ struct
class bst 
{
  int key;
  void* ptr_to_data;
  bst *left_child;
  bst *right_chlid;
  bst *parent;


}
Worst case for search is 0((height)
To compute the min - Keep going left till you cant go left anymore
To compute the max - Keep going right till you cant go right anymore
Predecessor
- If there is a left node, find the max of left node (or keep going right)
- if no left node, keep going up (parent) till the parent is smaller than you
In-order traversal (print in increasing order) - 0(n) operation
- Traverse left side and print
- Print root
- Traverse right side and print
To delete
- If no children, then delete
- If one child, that child becomes the parent (splice operation)
- If two children, then find predecessor (as shown above) and then swap. Next delete the key. Since the swapped out predecessor has no right, but may have a left, when we delete, the key, we get the case of no children or one child which is easy
Select and Rank - Need to augment data structure (population of sub tree including that node)

*********
 Red black trees
Invariants
- Each node red or black
- Root is black
- Never two reds in a row
- Every root-NULL path passes through exactly same number of blacks
Advantage is that the tree height guarantee is there - Height <= 2log2(n+1)

*********



Graphs

Linked Lists

Sorted Arrays

Bloom filter

B trees
B+ trees

AVL trees
Splay trees
Radix trees
Tries

*********
vector:

Contiguous memory.
Pre-allocates space for future elements, so extra space required beyond what's necessary for the elements themselves.
Each element only requires the space for the element type itself (no extra pointers).
Can re-allocate memory for the entire vector any time that you add an element.
Insertions at the end are constant, amortized time, but insertions elsewhere are a costly O(n).
Erasures at the end of the vector are constant time, but for the rest it's O(n).
You can randomly access its elements.
Iterators are invalidated if you add or remove elements to or from the vector.
You can easily get at the underlying array if you need an array of the elements.
list:

Non-contiguous memory.
No pre-allocated memory. The memory overhead for the list itself is constant.
Each element requires extra space for the node which holds the element,
including pointers to the next and previous elements in the list.
Never has to re-allocate memory for the whole list just because you add an element.
Insertions and erasures are cheap no matter where in the list they occur.
It's cheap to combine lists with splicing.
You cannot randomly access elements, so getting at a particular element in the
list can be expensive.
Iterators remain valid even when you add or remove elements from the list.
If you need an array of the elements, you'll have to create a new one and
add them all to it, since there is no underlying array.
In general, use vector when you don't care what type of sequential container
that you're using, but if you're doing many insertions or erasures to and
from anywhere in the container other than the end, you're going to want to use list.
Or if you need random access, then you're going to want vector, not list.
Other than that, there are naturally instances where you're going to need one or
the other based on your application, but in general, those are good guidelines.
********
https://stackoverflow.com/questions/10699265/how-can-i-efficiently-select-a-standard-library-container-in-c11

Is order important?
Yes:
  Last in first out?
    Stack
  First in First out?
    Queue
  Best in first out?
    Priority Queues
  Keep sorted elements?
  Yes:
    Look-up keys?
    Yes:
      Allow duplicates?
      Yes:
        Separate Key/value
        Yes:
          MultiMaps
        No:
          MultiSets
      No:
        Separate Key/value
        Yes:
          Maps
        No:
          Sets
    No:      
      Vectors
  No:
    Insert/Erase at middle
    Yes:
      Frequent Traversals
      Yes:
        Size varies widely
        Yes:
          Deque
        No:
          Vector
      No:
        List
    No:
      Persistent position
      Yes:
        List
      No:
        Size varies widely
        Yes:
          Deque
        No:
          Vector
No:
  Look-up keys
  Yes:
    Allow Duplicates
    Yes:
      Separate Key/value
      Yes:
        Unordered Multimaps
      No:
        Unordered Multisets
    No:
      Separate Key/Value
      Yes:
        Unordered Maps
      No:
        Unordered Sets
  No:
      Persistent position
      Yes:
        List
      No:
        Size varies widely
        Yes:
          Deque
        No:
          Vector





        
********
Gotchas:
If you have a const map, using [] operator fails as [] may add an element
if the element does not exist
Unordered map requires a compare operator and a hash function for user defined 
classes. Map requires a compare operator for using user defined elements



********

Links

https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md
http://homepages.e3.net.nz/~djm/cppcontainers.html
http://homepages.e3.net.nz/~djm/containerchoice.png
http://bigocheatsheet.com
https://www.cs.helsinki.fi/u/tpkarkka/alglib/k06/lectures/containers.html





