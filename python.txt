

https://docs.python.org/3/tutorial/introduction.html

Strings:
The start is always included, and the end always excluded. This makes sure that s[:i] + s[i:] is always equal to s
One way to remember how slices work is to think of the indices as pointing between characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of n characters has index n, for example:

 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1
The first row of numbers gives the position of the indices 0…6 in the string; the second row gives the corresponding negative indices. The slice from i to j consists of all characters between the edges labeled i and j, respectively.
Python strings cannot be changed — they are immutable. Therefore, assigning to an indexed position in the string results in an error:

Slices:
Out of range slices are handled gracefully in Python
word = "Python"
print (word[2:42])
prints "thon"


Lists:
Unlike strings, which are immutable, lists are a mutable type, i.e. it is possible to change their content:
You can also add new items at the end of the list, by using the append() method

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
letters[2:5] = ['C', 'D', 'E']
>>> letters
['a', 'b', 'C', 'D', 'E', 'f', 'g']
>>> # now remove them
>>> letters[2:5] = []
>>> letters
['a', 'b', 'f', 'g']
>>> # clear the list by replacing all the elements with an empty list
>>> letters[:] = []
>>> letters
[]

The built-in function len() also applies to lists:
If you need to modify the sequence you are iterating over while inside the loop, it is recommended that you first make a copy.
for w in words[:]:  # Loop over a slice copy of the entire list.
    if len(w) > 6:
        words.insert(0, w)

To iterate over the indices of a sequence, you can combine range() and len() as follows:

a = ['Mary', 'had', 'a', 'little', 'lamb']
for i in range(len(a)):
    print(i, a[i])

The object returned by range() is an object which returns the successive items of the desired sequence when you iterate over it, but it doesn’t really make the list, thus saving space.We say such an object is iterable, that is, suitable as a target for functions and constructs that expect something from which they can obtain successive items until the supply is exhausted. The function list() is another; it creates lists from iterables:
list(range(5))

For statement:
Else: A loop's else statement runs when no break is encountered. So it is like a fallthrough after the for loop finishes
Continue: Continues with the next iteration of the loop
Pass: Pass does nothing. It can be used with classes too

Functions:
The execution of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables and variables of enclosing functions cannot be directly assigned a value within a function (unless, for global variables, named in a global statement, or, for variables of enclosing functions, named in a nonlocal statement), although they may be referenced.

Even functions without a return statement do return a value, "None" 

The default values are evaluated at the point of function definition in the defining scope, so that

i = 5

def f(arg=i):
    print(arg)

i = 6
f()
will print 5.

Function parameters:
Formal parameter of the form *name is a tuple containing the positional arguments beyond the formal parameter list
Formal paramters of the form **name is a dictionary containing all keyword arguments except for those corresponding to a formal parameter
The least frequently used option is to specify that a function can be called with an arbitrary number of arguments. These arguments will be wrapped up in a tuple

Lambda:
Small anonymous functions can be created with the lambda keyword. This function returns the sum of its two arguments: lambda a, b: a+b. Lambda functions can be used wherever function objects are required. They are syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a normal function definition. Like nested function definitions, lambda functions can reference variables from the containing scope:

Lists:
operations:
append, insert, extend, remove, pop, clear, index, count, sort, reverse, copy

List comprehension
A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. 
squares = [x**2 for x in range(10)]
[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

Tuples:

Tuples are immutable, and usually contain a heterogeneous sequence of elements that are accessed via unpacking or indexing or even by attribute in the case of namedtuples. 
Creating one element tuple requires a comma at end
singleton = 'hello', 

x, y, z = t
Above is called Sequence unpacking. Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence.

Sets:
A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.






https://docs.python.org/3/tutorial/classes.html#iterators
Namespaces:
To rebind variables found outside of the innermost scope, the nonlocal statement can be used; if not declared nonlocal, those variables are read-only (an attempt to write to such a variable will simply create a new local variable in the innermost scope, leaving the identically named outer variable unchanged).
The language definition is evolving towards static name resolution, at “compile” time, so don’t rely on dynamic name resolution! (In fact, local variables are already determined statically.)


The global statement can be used to indicate that particular variables live in the global scope and should be rebound there; the nonlocal statement indicates that particular variables live in an enclosing scope and should be rebound there.







